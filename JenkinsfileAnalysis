pipeline {
    agent {
        label 'ubuntu-node'
    }
    environment {
        DOCKER_IMAGE = 'laxmidhakal/python-app' 
        // scannerHome = tool 'sonar7.0'
        NEXUS_URL = 'http://98.81.95.98:8081'
        NEXUS_REPO = 'my-python-repo'
        NEXUS_CREDENTIALS_ID = 'nexus-credentials'
        ARTIFACT_NAME = 'my-python-app.tar.gz'
    }
    stages {

        stage('Create Docker Image') {
            steps {
                echo "Building Docker image for Python application..."
                sh '''
                docker build -t ${DOCKER_IMAGE}:$BUILD_NUMBER .
                '''
            }
        }

        stage('Trivy Scan for dockerImage') {
            steps {
                script {
                    
                    def trivyOutput = sh(script: "trivy image ${DOCKER_IMAGE}:$BUILD_NUMBER", returnStdout: true).trim()

                    println trivyOutput
                    if (trivyOutput.contains("Total: 0")) {
                        echo "No vulnerabilities found in the Docker image."
                    } else {
                        echo "Vulnerabilities found in the Docker image."
                    }
                }
            }
        }

        stage('SonarQube Code Analysis') {
            steps {
                dir("${WORKSPACE}"){
               
                script {
                    def scannerHome = tool name: 'sonar7.0', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withSonarQubeEnv('sonar') {
                        sh "${scannerHome}/bin/sonar-scanner \
                            -D sonar.projectVersion=1.0-SNAPSHOT \
                            -D sonar.projectName=python-app \
                            -D sonar.projectKey=python-app \
                            -D sonar.sources=. \
                            -D sonar.sourceEncoding=UTF-8 \
                            -D sonar.language=python \
                            -D sonar.host.url=http://192.168.33.10:9000"
                    }
                }
            }
            }
       }

        stage('Build Python App') {

            steps {
                sh 'tar -czvf python-app.tar.gz *.py'
            }
            post {
              success {
                 echo 'Now Archiving the Python App...'
                 archiveArtifacts artifacts: 'python-app.tar.gz'
                }
            }
        }

        stage('Upload to Nexus') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUS_URL}",
                    groupId: 'QA',
                    version: '1.0.0',
                    repository: "${NEXUS_REPO}",
                    credentialsId: "${NEXUS_CREDENTIALS_ID}",

                    artifacts: [
                        [artifactId: 'python-sample',
                         classifier: '',
                         file: 'python-app.tar.gz',
                         type: 'tar.gz']
                    ]
                )
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo "Logging into Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    docker images
                    '''
                }
                echo "Pushing Docker image to Docker Hub..."
                sh '''
                docker tag ${DOCKER_IMAGE}:$BUILD_NUMBER ${DOCKER_IMAGE}:$BUILD_NUMBER
                docker push ${DOCKER_IMAGE}:$BUILD_NUMBER
                '''
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo "Starting containers with Docker Compose..."
                sh '''
                docker compose up -d
                '''
            }
        }
    }

    post { 
          always { 
            mail to: 'laxmidhakal159@gmail.com',
            subject: "Job '${JOB_NAME}' (${BUILD_NUMBER}) is waiting for input",
            body: "Please go to this ${BUILD_URL} and verify the build"
          }

        success {
            mail bcc: '', body: """Hello Team,

            Build #$BUILD_NUMBER is successful, please go through this url

             $BUILD_URL

            and verify the details.

            Regards,
            TechAxis DevOps Team""", cc: '', from: '', replyTo: '', subject: 'BUILD SUCCESS NOTIFICATION', to: 'laxmidhakal159@gmail.com'
        }
        failure {
            mail bcc: '', body: """Hello Team,
            
          Build #$BUILD_NUMBER is unsuccessful, please go through this url

          $BUILD_URL

          and verify the details.

          Regards,
          Techaxis DevOps Team""", cc: '', from: '', replyTo: '', subject: 'BUILD FAILED NOTIFICATION', to: 'laxmidhakal159@gmail.com'
        }
    }
}
