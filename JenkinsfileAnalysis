pipeline {
    agent {
        label 'ubuntu-node'
    }
    environment {
        DOCKER_IMAGE = 'laxmidhakal/python-app' 
        ARTIFACT_NAME = 'my-python-app.tar.gz'
    }
    stages {

        stage('Build And Create Docker Image') {
            steps {
                echo "Building Docker image for Python application..."
                sh '''
                docker build -t ${DOCKER_IMAGE}:$BUILD_NUMBER .
                '''
            }
        }

      

        // stage('SonarQube Code Analysis') {
        //     steps {
        //         dir("${WORKSPACE}"){
               
        //          script {
        //             def scannerHome = tool name: 'sonar7.0', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        //             withSonarQubeEnv('sonar') {
        //                 sh "${scannerHome}/bin/sonar-scanner \
        //                     -D sonar.projectVersion=1.0-SNAPSHOT \
        //                     -D sonar.projectName=python-app \
        //                     -D sonar.projectKey=python-app \
        //                     -D sonar.sources=. \
        //                     -D sonar.sourceEncoding=UTF-8 \
        //                     -D sonar.language=python \
        //                     -D sonar.host.url=http://192.168.33.10:9000"
        //                 }
        //             }
        //         }
        //     }
        // }


        stage('Trivy Scan for dockerImage') {
            steps {
                script {
                    echo "Running Trivy Security Scan..."

                    // def trivyOutput = sh(script: "trivy image ${DOCKER_IMAGE}:$BUILD_NUMBER", returnStdout: true).trim()

                    // println trivyOutput

                    // if (trivyOutput.contains("Total: 0")) {
                    //     echo "No vulnerabilities found in the Docker image."
                    // } else {
                    //     echo "Vulnerabilities found in the Docker image."
                    // }

                    // Run Trivy scan and fail if HIGH or CRITICAL vulnerabilities exist
                //    def scanStatus = sh(
                //    script: "trivy image --exit-code 1 --severity HIGH,CRITICAL ${DOCKER_IMAGE}:$BUILD_NUMBER",
                //    returnStatus: true
                //    )
                //      println trivyOutput

                //    if (scanStatus == 1) {
                //      echo "Build failed due to HIGH or CRITICAL vulnerabilities!"
                //     } else {
                //       echo "No HIGH or CRITICAL vulnerabilities found. Proceeding..."
                //     }


                }
            }
        }

        // stage('Create tar file for Docker Image') {

        //     steps {
        //         sh "docker save -o ${DOCKER_IMAGE}_${BUILD_NUMBER}.tar ${DOCKER_IMAGE}:$BUILD_NUMBER"
                    // echo "Docker image saved as ${DOCKER_IMAGE}_${BUILD_NUMBER}.tar"
        //     }
        //     post {
        //       success {
        //          echo 'Now Archiving the Docker Image...'
        //          archiveArtifacts artifacts: "${DOCKER_IMAGE}_${BUILD_NUMBER}.tar"
        //         }
        //     }
        // }

        // stage('Upload to Nexus') {
        //     steps {
        //         nexusArtifactUploader(
        //             nexusVersion: 'nexus3',
        //             protocol: 'http',
        //             nexusUrl: "18.209.45.35:8081",
        //             groupId: 'QA',
        //             version: '1.0.0',
        //             repository: "my-python-repo",
        //             credentialsId: "nexus-credentials",

        //             artifacts: [
        //                 [artifactId: 'python-sample',
        //                  classifier: '',
        //                  file: 'python.tar',
        //                  type: 'tar']
        //             ]
        //         )
        //     }
        // }

        stage('Push to Docker Hub') {
            steps {
                echo "Logging into Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    docker images
                    '''
                }
                echo "Pushing Docker image to Docker Hub..."
                sh '''
                docker push ${DOCKER_IMAGE}:$BUILD_NUMBER
                '''
            }
        }

        stage('Deploy To Staging') {
            steps {
                echo "Starting containers with Docker Compose..."
                sh '''
                docker compose up -d
                '''
            }
        }
    }

    post { 
        //   always { 
        //     mail to: 'laxmidhakal159@gmail.com',
        //     subject: "Job '${JOB_NAME}' (${BUILD_NUMBER}) is waiting for input",
        //     body: "Please go to this ${BUILD_URL} and verify the build"
        //   }

        success {
            mail bcc: '', body: """Hello Team,

            Build #$BUILD_NUMBER is successful, please go through this url

             $BUILD_URL

            and verify the details.

            Regards,
            TechAxis DevOps Team""", cc: '', from: '', replyTo: '', subject: 'BUILD SUCCESS NOTIFICATION', to: 'laxmidhakal159@gmail.com'
        }
        failure {
            mail bcc: '', body: """Hello Team,
            
          Build #$BUILD_NUMBER is unsuccessful, please go through this url

          $BUILD_URL

          and verify the details.

          Regards,
          Techaxis DevOps Team""", cc: '', from: '', replyTo: '', subject: 'BUILD FAILED NOTIFICATION', to: 'laxmidhakal159@gmail.com'
        }
    }
}
